Simple Keyboard Driver

Hanwen Wu
U43416787
hwwu@bu.edu

Note: Most of the detail could be found in the source code comments.

[Goal]

Get keyboard inputs using interrupt handler, and send converted ASCII to current tty.
Only basic keys are supported currently. 
IOCTL is not covered this time. But the overall structure for IOCTL is ready.

[Environment]

Ubuntu 12.04 with Linux Kernel 3.2.30
Notebook AT Keyboard

[General Ideas]

1. Remove original i8042 interrupt handler
2. Install my own interrupt handler on IRQ 1
3. Use inb instruction to read port 60 and 64, to get the status and scancode, in the top half
4. Convert scancode to ASCII using some sort of array, and update related keyboard status to keep track of control keys, in the bottom half
5. Send ASCII to tty using tty driver's write operation, in the bottom half
6. Return, or recover the original IRQ 1 handler

[A Journey from the Key to the Char]

1. You hit a key
2. i8042 controller get the key, and send a interrupt to CPU
3. CPU call an interrupt handler by looking up IDT 
4. The kernel gets called and dispatches the IRQ to i8042 driver (which is managed by SERIO virtual bus) (serio.c)
5. i8042 driver dispatches the IRQ to ATKBD driver (i8042.c)
6. ATKBD driver reports an input event to input core with a converted keycode (atkbd.c)
7. Input core dispatch the input event to an input event handler in keyboard event driver (keyboard.c)
8. Keyboard dirver converts keycode to ASCII or Unicode, according to the config, and send it to tty

When I replace the original one, my code will start to execute from STEP 4

[Known Issues]

1. Sometimes, it will generate infinite ENTER. I guess it may be casued by the ENTER key typed after typing "insmod keyboard_driver.ko"
2. SHIFT doesn't work
3. Some other weird issues regarding TTY

[Knowledge I Learned]

1. Use SYSTEM.MAP to hack unexported symbols
2. Linux keyboard driver and input subsystems
3. Linux ouverall interrupt handling routines
4. IOCTL and user/kernel communications
5. Scancode/Keycode related knowledges
6. Reading source code
